{"version":3,"sources":["../../src/request/client.ts"],"sourcesContent":["/**\n * The class and methods related to HTTP requests.\n *\n * @module\n */\nimport type { AnyType } from \"myzod/libs/types\";\nimport type { Infer } from \"myzod\";\nimport { ValidationError } from \"myzod\";\nimport { StandardErrorResponseSchema } from \"../types\";\nimport type CSCAuth from \"../auth\";\nimport FailedToGetCredential from \"../types/error/failed_to_get_credential\";\nimport APIError from \"../types/error/api_error\";\n\n/**\n * The client for requesting, with some API utilities.\n */\nexport default class Client {\n  /**\n   * The backend API url to request.\n   * @private\n   */\n  private backendURI = \"https://api.csc.deershark.com/api\";\n\n  private static instance: Client | null = null;\n\n  /**\n   * Get the singleton instance of this client.\n   */\n  public static getInstance(): Client {\n    if (!Client.instance) {\n      Client.instance = new Client();\n    }\n\n    return Client.instance;\n  }\n\n  /**\n   * Get the backend API endpoint.\n   *\n   * @constructor\n   */\n  public get BackendURI() {\n    return this.backendURI;\n  }\n\n  /**\n   * Set the backend API endpoint.\n   *\n   * @constructor\n   */\n  public set BackendURI(uri: string) {\n    this.backendURI = uri;\n  }\n\n  /**\n   * A basic fetcher for this SDK and Vercel SWR.\n   *\n   * @param method The method to call. For example, `/auth/user`.\n   * @param headers -> RequestInit\n   * @param init -> RequestInit\n   */\n  baseFetcher(\n    method: string,\n    { headers, ...init }: RequestInit = { headers: {} }\n  ): Promise<Response> {\n    const toFetchUri = `${this.BackendURI}${method}`;\n    return fetch(toFetchUri, {\n      ...init,\n      headers: {\n        ...headers,\n        \"User-Agent\": \"cscheckin-sdk-std/2.0\",\n      },\n    });\n  }\n\n  /**\n   * The JSON fetcher.\n   * @see Client.baseFetcher\n   */\n  async jsonFetcher(\n    method: string,\n    init: RequestInit\n  ): Promise<{ data: unknown; statusCode: number }> {\n    const resp = await this.baseFetcher(method, init);\n    return {\n      data: await resp.json(),\n      statusCode: resp.status,\n    };\n  }\n\n  /**\n   * The text fetcher.\n   * @see Client.baseFetcher\n   */\n  async textFetcher(\n    method: string,\n    init: RequestInit\n  ): Promise<{ data: unknown; statusCode: number }> {\n    const resp = await this.baseFetcher(method, init);\n    return {\n      data: await resp.text(),\n      statusCode: resp.status,\n    };\n  }\n\n  /**\n   * Create the header for an authenticated request.\n   *\n   * @param auth -> CSCAuth\n   * @param headers -> RequestInit\n   * @param init -> RequestInit\n   */\n  static async authRequest(\n    auth: CSCAuth,\n    { headers, ...init }: RequestInit = { headers: {} }\n  ): Promise<RequestInit> {\n    const authenticationHeader = await auth.getAuthenticationHeader();\n\n    if (!authenticationHeader) throw new FailedToGetCredential();\n\n    return {\n      ...init,\n      headers: {\n        ...headers,\n        Authorization: authenticationHeader,\n      },\n    };\n  }\n\n  /**\n   * Create the header for an POST (application/json) request.\n   *\n   * @param data The request object. We will serialize this\n   * data with `JSON.stringify()`.\n   * @param headers -> RequestInit\n   * @param init -> RequestInit\n   */\n  static postJsonRequest(\n    data: unknown,\n    { headers, ...init }: RequestInit = { headers: {} }\n  ): RequestInit {\n    return {\n      ...init,\n      body: JSON.stringify(data),\n      method: \"POST\",\n      headers: {\n        ...headers,\n        \"Content-Type\": \"application/json\",\n      },\n    };\n  }\n\n  /**\n   * Parse the response.\n   *\n   * @param response The response.\n   * @param schema The response schema built with myzod.\n   * @throws ValidationError\n   * @return [Type-casted Response, Error]\n   */\n  static responseParser<T extends AnyType>(\n    response: unknown,\n    schema: T\n  ): Infer<T> {\n    const parsedResponse = schema.try(response);\n\n    if (parsedResponse instanceof ValidationError) {\n      const parsedError = StandardErrorResponseSchema.try(response);\n\n      if (parsedError instanceof ValidationError) throw parsedError;\n      else if (parsedError.message) throw new APIError(parsedError.message);\n      else if (parsedError.error) throw new APIError(parsedError.error);\n      else throw parsedResponse;\n    }\n\n    return parsedResponse;\n  }\n\n  /**\n   * This method emulated what `response.ok` does.\n   * @param statusCode\n   */\n  static isResponseOk(statusCode: number): boolean {\n    // The ok read-only property of the Response interface contains\n    // a Boolean stating whether the response was successful\n    // (status in the range 200-299) or not.\n    //\n    // https://developer.mozilla.org/en-US/docs/Web/API/Response/ok\n    return statusCode >= 200 && statusCode <= 299;\n  }\n}\n\n/**\n * The singleton client instance.\n */\nexport const clientInstance = Client.getInstance();\n"],"names":[],"mappings":"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"}