import"core-js/modules/es.regexp.exec";import"core-js/modules/es.string.split";import"core-js/modules/es.array.map";import"core-js/modules/es.number.constructor";import"core-js/modules/es.date.to-string";import"core-js/modules/es.date.now";import a from"dayjs";import b from"../types/error/invalid_time_offset";function _arrayWithHoles(c){if(Array.isArray(c))return c}function _iterableToArrayLimit(c,d){var e=[],f=!0,g=!1,h=void 0;try{for(var i,j=c[Symbol.iterator]();!(f=(i=j.next()).done)&&(e.push(i.value),!d||e.length!==d);f=!0);}catch(k){g=!0,h=k}finally{try{f||null==j.return||j.return()}finally{if(g)throw h}}return e}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _slicedToArray(c,d){return _arrayWithHoles(c)||_iterableToArrayLimit(c,d)||_nonIterableRest()}export var timeOffsetPattern=/^\d\d:\d\d:\d\d$/;export function isTimeOffset(l){return!!timeOffsetPattern.exec(l)}export function getAddedTime(m,n){if(isTimeOffset(n)){var o=_slicedToArray(n.split(":").map(Number),3),p=o[0],q=o[1],r=o[2];if(void 0!==p&&void 0!==q&&void 0!==r)return a(m).add(p,"hour").add(q,"minute").add(r,"second")}throw new b(n)}export function isAfter(s,t){return getAddedTime(s,t).isAfter(Date.now())}export function isBefore(u,v){return getAddedTime(u,v).isBefore(Date.now())}